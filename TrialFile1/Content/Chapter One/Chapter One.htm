<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:sourceDocument="C:\Users\Andrew\Documents\Framemaker\Chapter One.fm">
    <head>
        <link href="../Resources/Stylesheets/Chapter One.css" rel="stylesheet" />
    </head>
    <body>
        <p>Data Primitives, Variables, and Math</p>
        <p>Data Primitives</p>
        <p>It’s odd, in a way, to begin a book on Java by writing about data primitives, since Java is so strongly object oriented. My Java mentor, Maxim, has a positive aversion to numbers -- and he is a mathematician and physicist. He claims to have had little to do with numbers since the eighth grade. It’s not that he has anything against numbers <span class="Emphasis">per se</span>; he just resents them because they aren’t objects. Still, we need them. Even Maxim concedes that, though he eyes any number with suspicion.</p>
        <p>Java has nine built-in data types, called primitives. These are the numeric types: integers and floating point numbers. However, the primitive types also include individual characters, and the boolean type, which has a value of true or false. Using these types, it is possible to build up many useful data structures, but the core of the language is <span class="Emphasis">objects</span>. Objects are what give Java it’s power and flexibility, and much of this book will be devoted to working with them. For now, we are concerned with the lowest-order building blocks. Not all languages have primitive types. Ruby, for example, treats all primitives as objects. For reasons of performance, the developers of Java elected to keep primitive types, though they cannot be operated on in the same way as objects. Java provides facilities to treat the data primitives like objects, where needed -- more about that later. (insert cross reference)</p>
    </body>
</html>