<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="834.24" MadCap:lastWidth="627">
    <head>
    </head>
    <body>
        <h1 class="title">Arrays</h1>
        <h2>Declaring and Initializing Arrays</h2>
        <p>An array is a  <i>data structure</i> which holds data of like type in an indexed series. The data may be of any type, primitives or objects. Later on you will be designing data structures using your own objects and methods, but arrays are a core structure for processing data in all programming languages.</p>
        <p> An array in its simplest form is a one dimensional data structure, which holds related values at predefined positions called <i>index positions</i>. In Java, index positions begin with 0, not 1, which is important to be aware of. For example, we could create an array with <i>n</i> index positions, numbered 0 through <i>n</i> - 1. An array holding ten values has index positions numbered 0-9. If you exceed the array size, you get an <i>out of bounds exception</i>, which means that you are attempting to use an index position which does not exist in the array.</p>
        <p>The syntax for declaring an array is the data type, followed by square brackets, followed by the array identifier, then an = sign, then the <code>new </code>keyword, the type of the array, and the size of the array. It's easier to see than to write or read.</p><pre xml:space="preserve">int theArray [] = new int [10];</pre>
        <p>This creates an array <code>theArray</code>, of type <code>int</code>, with a length of 10. </p>
        <p>This <i>length</i>merits closer examination. It is a property of the array, and can be used in any statement where the length is needed. It is possible to use a literal, which would be 10 for <code>theArray</code>, but this is not a good idea. It goes against the general principle of using variables in preference to "magic numbers," but there are more specific reasons than that. </p>
        <p>I know what you are thinking. "Aha. The array can change in length, and where would I be then?" Well, that's true -- to a point. In fact, Java prohibits the dimensions of array from being changed implicitly. The reason for that is that when an array is passed as an argument, you generally do not want to alter the length of the array, which as we know is possible in Java. To change the length of an array directly, you must do so the way you would for a variable: either by an assignment to a variable of the same type, or by re-using the identifier with different scope. </p>
        <p>&#160;</p>
        <p class="HeadingRunIn" MadCap:autonum="1.1 ">populating an array</p>
        <p>It is possible to initialize an array by declaring the members of the array individually. The array elements are declared in much the same way literals of the primitive types are declared.</p><pre xml:space="preserve">int primes = {3, 5, 7, 13, 17};</pre>
        <p>Note the use of the curly braces and the terminating semi-colon. </p>
        <p>Java contains a method called <code>fill</code> in the <code>Arrays</code> class which allows populating an array automatically with identical values. Let's create and populate an array using the <code>fill</code>method.</p><pre xml:space="preserve">int singleValueArray [] = new int [100];</pre><pre xml:space="preserve">Arrays.fill(singleValueArray, 5);</pre>
        <p>This method takes two arguments, the name of the array to be filled and the value with which to fill it, 5 in this case.</p>
        <p>However, by far the most common method of initializing an array is the for loop.</p>
        <p class="HeadingRunIn" MadCap:autonum="1.2 ">the enhanced for loop</p>
        <h2>Sorting Arrays</h2>
        <p class="HeadingRunIn" MadCap:autonum="1.3 ">bubble sort</p>
        <p class="HeadingRunIn" MadCap:autonum="1.4 ">quick sort</p>
        <h2>Arrays of multiple dimensions</h2>
        <p class="HeadingRunIn" MadCap:autonum="1.5 ">array of arrays</p>
        <p class="HeadingRunIn" MadCap:autonum="1.6 ">index positions</p>
        <h2>Operations on arrays</h2>
        <p class="HeadingRunIn" MadCap:autonum="1.7 ">shuffling an array</p>
        <p class="HeadingRunIn" MadCap:autonum="1.8 ">sampling an array</p>
        <p class="HeadingRunIn" MadCap:autonum="1.9 ">the sieve of erathosthenes</p>
        <p class="HeadingRunIn" MadCap:autonum="1.10 ">matrix multiplication</p>
        <h2>An array of useful methods: the java.util.Arrays class</h2>
    </body>
</html>